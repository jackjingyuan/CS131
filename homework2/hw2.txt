My implentation is simliar with the last question in homework 1. 
In my perspective, the hole grammar structure is a three dimension array. Each symbol is the element in such array, and each right hand side form a array, and each alternative list is a two dimension array. As a result, the grammar structure is a three dimension array. 
To solve such problme, I spilted homework2 question into 2 parts. 
First, how to find the two dimensions array which coresponsed with each nonterminal value and travese such array to match the fragment if necessary. 
Second, how to access each element in grammar whether it is nonterminal or terminal.

I used function match_rule to solve the first one and function match_table to solve the second one.
The process of second function: use production function to find two dimensions array which coresponsed with targeted nonterminal value, pass it as a arugment to function match_table-> Using match_rule to check relationship between the fragment and each rule in such rule list. Because as this time the program is checking the relationship between fragment and a certain rule, the program is going to pass this rule to the acceptor. If there are some relation between fragment and rule then return what acceptor return. The process of match_rule: If the function completed travesal in a rule,  function return what acceptor return. If not and the first symbol is a terminal then match the first element in fragment with first symbol, if match then fucntion going to travese other part rule and match such rule with fragment. If the first symbol is a nonterminal then call the match_table function with new acceptor to find the most bottom level of such nonterminal value and match it with fragment.

After I wrote down the skeleton of this program, I used a different approach to think this question. I considered the purpose of this program is to construct a tree. In such tree, each (n+1)th level is a derivation of (n)th level restrict by the rule in (n)th level. The purpose of this program is to match the most bottom level of each note to each element in fragment orderly. The purpose of match_table is to derivate a note in (n)th level to (n+1)th level or change rule in (n+1)th with respect to a certain note in (n)th level. The purpose of match_rule is to determine whether to change the rule which function itself is checking or such rule can be matched with part of /all fragment.

After I clarify the purpose of each function, it is easy to implement such function in ocaml. Because one of the purpose of ocaml language is to spilt a large problem into small question with different function to solve those questions, and conclude the result of each function to obtain the result of a large question.  